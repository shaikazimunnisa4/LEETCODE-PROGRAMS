1169. Invalid Transactions

A transaction is possibly invalid if:

the amount exceeds $1000, or;
if it occurs within (and including) 
60 minutes of another transaction with the same name in a different city.
You are given an array of strings transaction where transactions[i] 
consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.

Return a list of transactions that are possibly invalid. You may return the answer in any order.

Example 1:

Input: transactions = ["alice,20,800,mtv","alice,50,100,beijing"]
Output: ["alice,20,800,mtv","alice,50,100,beijing"]
Explanation: The first transaction is invalid because the second
transaction occurs within a difference of 60 minutes, 
have the same name and is in a different city. Similarly the second one is invalid too.

Example 2:

Input: transactions = ["alice,20,800,mtv","alice,50,1200,mtv"]
Output: ["alice,50,1200,mtv"]
Example 3:

Input: transactions = ["alice,20,800,mtv","bob,50,1200,mtv"]
Output: ["bob,50,1200,mtv"]
 

Constraints:

transactions.length <= 1000
Each transactions[i] takes the form "{name},{time},{amount},{city}"
Each {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10.
Each {time} consist of digits, and represent an integer between 0 and 1000.
Each {amount} consist of digits, and represent an integer between 0 and 2000.



PROGRAM:

class Solution:
    def invalidTransactions(self, transactions):
        parsed = []
        
        # Parse each transaction
        for t in transactions:
            name, time, amount, city = t.split(",")
            parsed.append((name, int(time), int(amount), city, t))
        
        n = len(parsed)
        invalid = [False] * n
        
        # Rule 1: amount > 1000
        for i in range(n):
            if parsed[i][2] > 1000:
                invalid[i] = True
        
        # Rule 2: within 60 mins, same name, different city
        for i in range(n):
            for j in range(i+1, n):
                if parsed[i][0] == parsed[j][0] and abs(parsed[i][1] - parsed[j][1]) <= 60 and parsed[i][3] != parsed[j][3]:
                    invalid[i] = True
                    invalid[j] = True
        
        # Collect invalid transactions
        return [parsed[i][4] for i in range(n) if invalid[i]]
